"""
Simple unit tests for preprocessing functions.
Tests focus on functions that have predictable, testable behavior.
This file was generated by GitHub Copilot.
"""

import unittest
import numpy as np
import cv2
import os
import tempfile
from preprocessing import (
    brightness_range_maximisation,
    soft_tissue_contrast_enhancement,
    lung_field_enhancement,
    cardiac_silhouette_enhancement,
    soft_tissue_edge_enhancement,
    preprocess_xray_soft_tissue
)


class TestPreprocessingFunctions(unittest.TestCase):
    
    def setUp(self):
        """Create test images for testing."""
        # Create a simple 100x100 grayscale test image
        self.test_image = np.random.randint(50, 200, (100, 100), dtype=np.uint8)
        
        # Create an image with known min/max values
        self.known_range_image = np.array([
            [50, 100, 150],
            [75, 125, 175],
            [25, 200, 100]
        ], dtype=np.uint8)
        
        # Create a temporary image file for file-based tests
        self.temp_dir = tempfile.mkdtemp()
        self.temp_image_path = os.path.join(self.temp_dir, 'test_image.png')
        cv2.imwrite(self.temp_image_path, self.test_image)
    
    def tearDown(self):
        """Clean up temporary files."""
        if os.path.exists(self.temp_image_path):
            os.remove(self.temp_image_path)
        os.rmdir(self.temp_dir)
    
    def test_brightness_range_maximisation_output_range(self):
        """Test that brightness maximisation outputs full 0-255 range."""
        result = brightness_range_maximisation(self.known_range_image)
        
        # Check that output spans full range
        self.assertEqual(np.min(result), 0)
        self.assertEqual(np.max(result), 255)
        
        # Check that output is uint8
        self.assertEqual(result.dtype, np.uint8)
    
    def test_brightness_range_maximisation_shape_preservation(self):
        """Test that brightness maximisation preserves image shape."""
        result = brightness_range_maximisation(self.test_image)
        
        # Shape should be preserved
        self.assertEqual(result.shape, self.test_image.shape)
    
    def test_brightness_range_maximisation_monotonic(self):
        """Test that brightness maximisation preserves relative ordering."""
        # Create simple test case with known ordering
        test_array = np.array([[100, 150, 200]], dtype=np.uint8)
        result = brightness_range_maximisation(test_array)
        
        # Relative ordering should be preserved
        self.assertLess(result[0, 0], result[0, 1])
        self.assertLess(result[0, 1], result[0, 2])
    
    def test_soft_tissue_contrast_enhancement_shape(self):
        """Test that soft tissue enhancement preserves image shape."""
        result = soft_tissue_contrast_enhancement(self.test_image)
        
        self.assertEqual(result.shape, self.test_image.shape)
        self.assertEqual(result.dtype, np.uint8)
    
    def test_soft_tissue_contrast_enhancement_range(self):
        """Test that soft tissue enhancement keeps values in valid range."""
        result = soft_tissue_contrast_enhancement(self.test_image)
        
        self.assertGreaterEqual(np.min(result), 0)
        self.assertLessEqual(np.max(result), 255)
    
    def test_lung_field_enhancement_shape(self):
        """Test that lung field enhancement preserves image shape."""
        result = lung_field_enhancement(self.test_image)
        
        self.assertEqual(result.shape, self.test_image.shape)
        self.assertEqual(result.dtype, np.uint8)
    
    def test_cardiac_silhouette_enhancement_shape(self):
        """Test that cardiac enhancement preserves image shape."""
        result = cardiac_silhouette_enhancement(self.test_image)
        
        self.assertEqual(result.shape, self.test_image.shape)
        self.assertEqual(result.dtype, np.uint8)
    
    def test_soft_tissue_edge_enhancement_shape(self):
        """Test that edge enhancement preserves image shape."""
        result = soft_tissue_edge_enhancement(self.test_image)
        
        self.assertEqual(result.shape, self.test_image.shape)
        self.assertEqual(result.dtype, np.uint8)
    
    def test_preprocess_xray_soft_tissue_file_loading(self):
        """Test that preprocessing function can load and process a file."""
        result = preprocess_xray_soft_tissue(self.temp_image_path, output_size=(50, 50))
        
        # Check that output has correct size
        self.assertEqual(result.shape, (50, 50))
        self.assertEqual(result.dtype, np.uint8)
    
    def test_preprocess_xray_soft_tissue_invalid_path(self):
        """Test that preprocessing function raises error for invalid path."""
        with self.assertRaises(ValueError):
            preprocess_xray_soft_tissue('nonexistent_file.png')
    
    def test_preprocess_xray_soft_tissue_resizing(self):
        """Test that preprocessing function correctly resizes images."""
        # Test different output sizes
        sizes_to_test = [(100, 100), (200, 150), (50, 75)]
        
        for width, height in sizes_to_test:
            result = preprocess_xray_soft_tissue(
                self.temp_image_path, 
                output_size=(width, height)
            )
            self.assertEqual(result.shape, (height, width))
    
    def test_functions_with_small_images(self):
        """Test that functions work with very small images."""
        small_image = np.random.randint(0, 255, (5, 5), dtype=np.uint8)
        
        # Test all enhancement functions
        functions_to_test = [
            brightness_range_maximisation,
            soft_tissue_contrast_enhancement,
            lung_field_enhancement,
            cardiac_silhouette_enhancement,
            soft_tissue_edge_enhancement
        ]
        
        for func in functions_to_test:
            with self.subTest(function=func.__name__):
                result = func(small_image)
                self.assertEqual(result.shape, small_image.shape)
                self.assertEqual(result.dtype, np.uint8)
    
    def test_functions_with_edge_case_images(self):
        """Test functions with edge case images (all black, all white)."""
        # All black image
        black_image = np.zeros((50, 50), dtype=np.uint8)
        
        # All white image  
        white_image = np.full((50, 50), 255, dtype=np.uint8)
        
        # Constant value image
        constant_image = np.full((50, 50), 128, dtype=np.uint8)
        
        edge_cases = [black_image, white_image, constant_image]
        
        for i, test_image in enumerate(edge_cases):
            with self.subTest(case=f"edge_case_{i}"):
                # Test brightness range maximisation
                result = brightness_range_maximisation(test_image)
                self.assertEqual(result.shape, test_image.shape)
                self.assertEqual(result.dtype, np.uint8)
                
                # Test other functions don't crash
                try:
                    soft_tissue_contrast_enhancement(test_image)
                    lung_field_enhancement(test_image)
                    cardiac_silhouette_enhancement(test_image)
                    soft_tissue_edge_enhancement(test_image)
                except Exception as e:
                    self.fail(f"Function failed on edge case {i}: {e}")


class TestImageProcessingProperties(unittest.TestCase):
    """Test general properties that should hold for image processing functions."""
    
    def setUp(self):
        self.test_image = np.random.randint(0, 255, (100, 100), dtype=np.uint8)
    
    def test_brightness_range_maximisation_idempotent(self):
        """Test that applying brightness maximisation twice gives same result."""
        result1 = brightness_range_maximisation(self.test_image)
        result2 = brightness_range_maximisation(result1)
        
        # Should be approximately equal (allowing for small rounding differences)
        np.testing.assert_array_almost_equal(result1, result2, decimal=0)
    
    def test_enhancement_functions_deterministic(self):
        """Test that enhancement functions are deterministic."""
        functions_to_test = [
            brightness_range_maximisation,
            soft_tissue_contrast_enhancement,
            lung_field_enhancement,
            cardiac_silhouette_enhancement,
            soft_tissue_edge_enhancement
        ]
        
        for func in functions_to_test:
            with self.subTest(function=func.__name__):
                result1 = func(self.test_image.copy())
                result2 = func(self.test_image.copy())
                
                np.testing.assert_array_equal(result1, result2)


if __name__ == '__main__':
    # Run tests with verbose output
    unittest.main(verbosity=2)